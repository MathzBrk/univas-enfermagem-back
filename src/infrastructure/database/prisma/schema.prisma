// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  EMPLOYEE  // Funcionário comum (recebe vacinas)
  NURSE     // Enfermeiro (aplica vacinas)
  MANAGER   // Gestor (gerencia e gera relatórios)
}

enum SchedulingStatus {
  SCHEDULED   // Agendado
  CONFIRMED   // Confirmado
  CANCELLED   // Cancelado
  COMPLETED   // Concluído
}

enum ReportType {
  GENERAL           // Relatório geral do sistema
  BY_EMPLOYEE       // Relatório por funcionário
  BY_VACCINE        // Relatório por vacina
  BY_PERIOD         // Relatório por período
  COVERAGE          // Relatório de cobertura vacinal
}

// ============================================
// MODELS
// ============================================

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  cpf       String   @unique
  phone     String?
  role      Role     @default(EMPLOYEE)
  isActive  Boolean  @default(true)

  coren     String?  @unique

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Vaccine relationships
  schedulingsReceived      VaccineScheduling[]   @relation("UserSchedulings")
  applicationsReceived     VaccineApplication[]  @relation("UserApplications")
  applicationsPerformed    VaccineApplication[]  @relation("NurseApplications")

  // Report relationships
  reportsGenerated         Report[]              @relation("GeneratedReports")
  reportsAbout             Report[]              @relation("UserReports")

  // Notification relationships
  notifications            Notification[]

  @@map("users")
}

model Vaccine {
  id                String   @id @default(uuid())
  name              String
  manufacturer      String
  description       String?
  dosesRequired     Int      @default(1)
  intervalDays      Int?     
  // Stock control
  stockQuantity     Int      @default(0)
  minStockLevel     Int      @default(10)

  isObligatory      Boolean? 


  // Validity
  expirationDate    DateTime?

  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  // Relationships
  schedulings       VaccineScheduling[]
  applications      VaccineApplication[]

  @@map("vaccines")
}

model VaccineScheduling {
  id              String            @id @default(uuid())
  scheduledDate   DateTime
  status          SchedulingStatus  @default(SCHEDULED)
  doseNumber      Int               @default(1)
  notes           String?

  // Foreign Keys
  userId          String
  vaccineId       String

  // Timestamps
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?

  // Relationships
  user            User              @relation("UserSchedulings", fields: [userId], references: [id])
  vaccine         Vaccine           @relation(fields: [vaccineId], references: [id])
  application     VaccineApplication?

  @@index([userId])
  @@index([vaccineId])
  @@index([scheduledDate])
  @@map("vaccine_schedulings")
}

model VaccineApplication {
  id                  String    @id @default(uuid())
  applicationDate     DateTime  @default(now())
  doseNumber          Int       @default(1)
  batchNumber         String
  applicationSite     String
  observations        String?

  // Foreign Keys
  userId              String
  vaccineId           String
  appliedById         String
  schedulingId        String?   @unique

  // Timestamps
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?

  // Relationships
  user                User      @relation("UserApplications", fields: [userId], references: [id])
  vaccine             Vaccine   @relation(fields: [vaccineId], references: [id])
  appliedBy           User      @relation("NurseApplications", fields: [appliedById], references: [id])
  scheduling          VaccineScheduling? @relation(fields: [schedulingId], references: [id])

  @@index([userId])
  @@index([vaccineId])
  @@index([appliedById])
  @@index([applicationDate])
  @@map("vaccine_applications")
}

model Report {
  id              String      @id @default(uuid())
  title           String
  type            ReportType
  description     String?
  fileUrl         String?     // URL do arquivo gerado (PDF, Excel, etc)

  // Period
  startDate       DateTime?
  endDate         DateTime?

  // Foreign Keys
  generatedById   String
  userId          String?     // Para relatórios específicos de um usuário

  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deletedAt       DateTime?

  // Relationships
  generatedBy     User        @relation("GeneratedReports", fields: [generatedById], references: [id])
  user            User?       @relation("UserReports", fields: [userId], references: [id])

  @@index([generatedById])
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("reports")
}

model Notification {
  id          String   @id @default(uuid())
  type        NotificationType
  title       String
  message     String
  isRead      Boolean  @default(false)

  userId      String
  user        User @relation(fields: [userId], references: [id])

  createdAt   DateTime @default(now())
  readAt      DateTime?

  @@map("notifications")
}

enum NotificationType {
  DOSE_REMINDER
  VACCINE_EXPIRING
  LOW_STOCK
  SCHEDULING_CONFIRMED
  GENERAL
}
